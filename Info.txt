# dashboard is now ready
# backend Post api done and get also but both images cant not upload at the same time . i will resolve it
# User api
# Post api And Get Api
http://localhost:3000/api/User
# Delete and Update Api
http://localhost:3000/api/User/66f137ec0d4f234b6ce83816
# working in Signature api only model is created


# result after date change
let result = 12 + 32; // Initial sum
console.log(`Initial result: ${result}`);

let currentDate = new Date().getDate(); // Get the current day

const intervalId = setInterval(() => {
    const newDate = new Date().getDate(); // Get the new current day
    
    // Check if the date has changed (new day)
    if (newDate !== currentDate) {
        result += 12; // Add 12 to the result when the day changes
        currentDate = newDate; // Update currentDate to the new day
        console.log(`Updated result on new day: ${result}`);
    }
}, 60000); // Check every 1 minute (60000 milliseconds)

#result after month change
let result = 12 + 32; // Initial sum
console.log(`Initial result: ${result}`);

let currentMonth = new Date().getMonth(); // Get the current month (0-11)

const intervalId = setInterval(() => {
    const newMonth = new Date().getMonth(); // Get the new current month
    
    // Check if the month has changed (new month)
    if (newMonth !== currentMonth) {
        result += 12; // Add 12 to the result when the month changes
        currentMonth = newMonth; // Update currentMonth to the new month
        console.log(`Updated result on new month: ${result}`);
    }
}, 60000); // Check every 1 minute (60000 milliseconds)

# result after quarter change
let result = 12 + 32; // Initial sum
console.log(`Initial result: ${result}`);

// Function to determine the current quarter (1 to 4)
const getCurrentQuarter = () => {
    const month = new Date().getMonth(); // Get the current month (0-11)
    return Math.floor(month / 3) + 1; // Calculate the quarter
};

let currentQuarter = getCurrentQuarter(); // Get the current quarter

const intervalId = setInterval(() => {
    const newQuarter = getCurrentQuarter(); // Get the new current quarter
    
    // Check if the quarter has changed (new quarter)
    if (newQuarter !== currentQuarter) {
        result += 12; // Add 12 to the result when the quarter changes
        currentQuarter = newQuarter; // Update currentQuarter to the new quarter
        console.log(`Updated result on new quarter: ${result}`);
    }
}, 60000); // Check every 1 minute (60000 milliseconds)

# result after year change
let result = 12 + 32; // Initial sum
console.log(`Initial result: ${result}`);

// Get the current year
let currentYear = new Date().getFullYear(); 

const intervalId = setInterval(() => {
    const newYear = new Date().getFullYear(); // Get the new current year
    
    // Check if the year has changed (new year)
    if (newYear !== currentYear) {
        result += 12; // Add 12 to the result when the year changes
        currentYear = newYear; // Update currentYear to the new year
        console.log(`Updated result on new year: ${result}`);
    }
}, 60000); // Check every 1 minute (60000 milliseconds)

# date change to mm/dd/yyyy formate
// Given date string in ISO format
const startDate = "2024-10-03T00:00:00.000Z";

// Create a new Date object from the ISO string
const dateObject = new Date(startDate);

// Format the date to mm/dd/yyyy
const formattedDate = `${(dateObject.getMonth() + 1).toString().padStart(2, '0')}/${dateObject.getDate().toString().padStart(2, '0')}/${dateObject.getFullYear()}`;

console.log(`Formatted date: ${formattedDate}`);

#
  // Calculation function
  async function calculation(startDateInput, initialValueInput) {
    // Create a new Date object from the ISO string
    const dateObject = new Date(startDateInput);

    // Format the date to mm/dd/yyyy (optional, since we don't need this for calculations)
    const formattedDate = `${(dateObject.getMonth() + 1)
      .toString()
      .padStart(2, "0")}/${dateObject
      .getDate()
      .toString()
      .padStart(2, "0")}/${dateObject.getFullYear()}`;

    // Evaluate the initial sum
    // console.log("value is: ", initialValueInput);
    let result = eval(initialValueInput); // Initial sum (use cautiously)
    console.log(`Initial result: ${result}`);

    // Set the starting date
    let startDate = new Date(formattedDate); // Use the original date input
    let currentDate = startDate.getTime(); // Use getTime() to compare full date

    const intervalId = setInterval(() => {
      const newDate = new Date(); // Get the new current date

      // Check if the date has changed (new day)
      if (newDate.getTime() !== currentDate) {
        result += 12; // Add 12 to the result when the day changes
        currentDate = newDate.getTime(); // Update currentDate to the new date
        console.log(`Updated result on new day: ${result}`);
      }
    }, 60000); // Check every 1 minute (60000 milliseconds)
  }

# code with update api 
 async function drivercal(date, pay, value, userId, formData) {
    try {
      // Convert 'pay' to a number
      const result = Number(pay);
      // Convert 'date' to a Date object
      const passingDate = new Date(date);

      // Get the current date
      const currentDate = new Date();

      // Function to calculate the final result based on time difference
      const calculateFinalResult = (timePassed) => {
        return result * (timePassed + 1);
      };

      let timePassed;
      value = value.toLowerCase();
      switch (value) {
        case "perday":
          // Calculate the difference in time between currentDate and passingDate in milliseconds
          const timeDiffDays = currentDate - passingDate;
          // Convert the difference from milliseconds to days
          timePassed = Math.floor(timeDiffDays / (1000 * 60 * 60 * 24));
          break;

        case "permonth":
          // Calculate the difference in months
          timePassed =
            (currentDate.getFullYear() - passingDate.getFullYear()) * 12 +
            (currentDate.getMonth() - passingDate.getMonth());
          break;

        case "perquarter":
          // Calculate the difference in months and convert to quarters
          timePassed =
            (currentDate.getFullYear() - passingDate.getFullYear()) * 12 +
            (currentDate.getMonth() - passingDate.getMonth());
          timePassed = Math.floor(timePassed / 3);
          break;

        case "peryear":
          // Calculate the difference in years
          timePassed = currentDate.getFullYear() - passingDate.getFullYear();
          // Adjust if the current date is before the anniversary of passingDate
          if (
            currentDate.getMonth() < passingDate.getMonth() ||
            (currentDate.getMonth() === passingDate.getMonth() &&
              currentDate.getDate() < passingDate.getDate())
          ) {
            timePassed--;
          }
          break;

        default:
          return "Invalid value type provided.";
      }

      // Ensure timePassed is not negative
      timePassed = Math.max(0, timePassed);

      // Calculate the final result
      const finalResult = calculateFinalResult(timePassed);

      // Prepare form data to send
      const formDataToSend = new FormData();
      const specificFieldKey = "calculation"; // The field you want to update

      // Set the specific field you want to update
      formDataToSend.set(specificFieldKey, finalResult);

      // Append other fields from the existing formData if it exists
      if (formData) {
        Object.keys(formData).forEach((key) => {
          if (key !== specificFieldKey) {
            formDataToSend.append(key, formData[key]);
          }
        });
      }

      // Sending the PUT request
      const response = await axios.put(
        `${API_URL_Drivercalculation}/${userId}`,
        formDataToSend,
        {
          headers: {
            "Content-Type": "multipart/form-data", // Set the appropriate headers for form data
          },
        }
      );

      console.log("Update specific field successful:", response.data);
      return finalResult; // Return finalResult after the request completes
    } catch (error) {
      console.error("Failed to update driver:", error);
      // You can show a toast notification or perform other error handling
      throw error; // Rethrow the error if needed
    }
  }


  #
    // function drivercal(date, pay, value) {
  //   // Convert 'pay' to a number
  //   const result = Number(pay);
  //   // Convert 'date' to a Date object
  //   const passingDate = new Date(date);

  //   // Get the current date and subtract one day
  //   const currentDate = new Date();
  //   currentDate.setDate(currentDate.getDate() - 1); // Subtract one day

  //   // Function to calculate the final result based on time difference
  //   const calculateFinalResult = (timePassed) => {
  //     return result * (timePassed + 1);
  //   };

  //   let timePassed;
  //   value = value.toLowerCase();
  //   switch (value) {
  //     case "perday":
  //       // Calculate the difference in time between currentDate and passingDate in milliseconds
  //       const timeDiff = currentDate - passingDate;
  //       // Convert the difference from milliseconds to days
  //       timePassed = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
  //       break;

  //     case "permonth":
  //       // Calculate the difference in months between currentDate and passingDate
  //       timePassed =
  //         (currentDate.getFullYear() - passingDate.getFullYear()) * 12 +
  //         (currentDate.getMonth() - passingDate.getMonth());
  //       break;

  //     case "perquarter":
  //       // Calculate the difference in months
  //       timePassed =
  //         (currentDate.getFullYear() - passingDate.getFullYear()) * 12 +
  //         (currentDate.getMonth() - passingDate.getMonth());
  //       // Calculate the number of quarters passed (1 quarter = 3 months)
  //       timePassed = Math.floor(timePassed / 3);
  //       break;

  //     case "peryear":
  //       // Calculate the difference in years between currentDate and passingDate
  //       timePassed = currentDate.getFullYear() - passingDate.getFullYear();
  //       // If the current date is before the anniversary of passingDate in the current year, subtract 1
  //       if (
  //         currentDate.getMonth() < passingDate.getMonth() ||
  //         (currentDate.getMonth() === passingDate.getMonth() &&
  //           currentDate.getDate() < passingDate.getDate())
  //       ) {
  //         timePassed--;
  //       }
  //       break;

  //     default:
  //       return "Invalid value type provided.";
  //   }

  //   // Calculate the final result
  //   const finalResult = calculateFinalResult(timePassed);

  //   // Return the final result or pay if finalResult is 0
  //   return finalResult;
  // }